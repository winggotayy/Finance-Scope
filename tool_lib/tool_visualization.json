{
  "plot_stock_data(stock_data: pd.DataFrame, ax: Optional[plt.Axes] = None, figure_type: str = 'line', title_name: str ='') -> plt.Axes:\n": "\"\"\"\n    This function plots stock data.\n\n    Args:\n    - stock_data: the stock data to plot. The DataFrame should contain three columns:\n        - Column 1: trade date in 'YYYYMMDD'\n        - Column 2: Stock name or code (string format)\n        - Column 3: Index value (numeric format)\n        The DataFrame can be time series data or cross-sectional data. If it is time-series data, the first column represents different trade time, the second column represents the same name. For cross-sectional data, the first column is the same, the second column contains different stocks.\n\n    - ax: matplotlib Axes object, the axes to plot the data on\n    - figure_type: either 'line' or 'bar'\n    - title_name\n\n    Returns:\n    - matplotlib Axes object, the axes containing the plot\n    \"\"\"",
  "plot_bar_chart(data: pd.DataFrame, ax: Optional[plt.Axes] = None, title: str='') -> plt.Axes:\n":"\"\"\"\n    Plot a bar chart for given data.\n\n    Args:\n    - data: pandas DataFrame with columns ['x','y'] to plot\n    - ax: existing matplotlib Axes to draw on (optional)\n    - title: title of the chart\n\n    Returns:\n    - matplotlib Axes object with the rendered bar chart\n    \"\"\"",
  "plot_pie_chart(data: pd.DataFrame, labels_col: str, values_col: str, ax: Optional[plt.Axes] = null, title: str = '') -> plt.Axes\n":"\"\"\"\n    Plot a pie chart.\n\n    Args:\n    - data: pandas.DataFrame，含标签列和数值列\n    - labels_col: 扇区标签所在列\n    - values_col: 扇区大小值所在列\n    - ax: matplotlib Axes，可选，若无则新建\n    - title: 图表标题\n    Returns:\n    - matplotlib Axes 对象，包含绘制好的饼图\n    \"\"\"",  
  "plot_scatter(data: pd.DataFrame, x_col: str, y_col: str, hue_col: Optional[str] = None, title: str = '', xlabel: str = '', ylabel: str = '', ax: Optional[plt.Axes] = None) -> plt.Axes:\n": "\"\"\"\n    Create a scatter plot comparing two stock prices with optional color dimension.\n\n    Args:\n        data: DataFrame containing the stock price data\n        x_col: Column name for x-axis (first stock)\n        y_col: Column name for y-axis (second stock)\n        hue_col: Optional column name for color dimension (e.g., month)\n        title: Plot title\n        xlabel: X-axis label\n        ylabel: Y-axis label\n        ax: Optional matplotlib Axes object\n    \"\"\"",
  "plot_correlation_heatmap(data1: pd.DataFrame, data2: pd.DataFrame, data3: pd.DataFrame, title: str = '', figsize: tuple = (10, 8), cmap: str = 'RdYlGn', annot: bool = True) -> plt.Axes:\n": "\"\"\"\n    Create a correlation heatmap for given data.\n\n    Args:\n        data: pandas DataFrame with columns to calculate correlation\n        title: title of the chart\n        figsize: tuple of the width and height of the figure\n        cmap: color map\n        annot: whether to annotate the heatmap\n    \"\"\"",
  "plot_k_line(stock_data: pd.DataFrame, title: str = '') -> None:\n": "\"\"\"\n        Plots a K-line chart of stock price and volume.\n\n        Args:\n            stock_data : A pandas DataFrame containing the stock price information, in which each row\n                represents a daily record. The DataFrame must contain the 'trade_date','open', 'close', 'high', 'low','volume', 'name' columns, which is used for k-line and volume.\n                如果dataframe中还含有'macd'，'kdj', 'rsi', 'cci', 'boll','pe_ttm','turnover_rate'等列，则在k线图下方绘制这些指标的子图.\n        \"\"\"",
  "print_save_table(df: pd.DataFrame, title_name: str, save:bool = False ,file_path: str = './output/') -> None:": "\"\"\"\n        It prints the dataframe and saves it to a CSV file at the specified file path.\n\n        Args:\n        - df: the dataframe to be printed and saved to a CSV file\n        - title_name: the name to be printed and saved\n        - save: whether to save as a CSV file\n        - file_path \n\n      \"\"\"",
  "output_mean_median_col(data: pd.DataFrame, col: str = 'new_feature') -> float:\n": "# It calculates the mean and median value for the specified column.",

  "visualize_results(df: pd.DataFrame, output_prefix: str, pie_ax: Optional[plt.Axes] = None, trend_ax: Optional[plt.Axes] = None) -> Tuple[plt.Figure, Tuple[plt.Axes, plt.Axes]]:\n": "\"\"\"\n        Visualize the results of the sentiment analysis.\n\n        Args:\n        - df: the dataframe to be visualized\n        - output_prefix: the prefix of the output file\n        - pie_ax: the axes of the pie chart\n        - trend_ax: the axes of the trend chart\n\n        Returns:\n        - Tuple[plt.Axes, plt.Axes]: the axes of the pie chart and the trend chart\n    \"\"\"",
  "generate_markdown_report(pdf_path: str, text: str, indicators: dict, risks: dict) -> str:\n": "\"\"\"\n        Generate a markdown report from a PDF file.\n        Args:\n   - pdf_path: The path to the PDF file\n   - text: The text to generate a markdown report from\n   - indicators: The financial indicators to include in the markdown report\n   - risks: The risk keywords to include in the markdown report\n\n        Returns:\n        - str: The markdown report generated from the PDF file\n \"\"\""
}
